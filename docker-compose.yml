services:
  app:
    build:
      context: ./
      dockerfile: cmd/app/user/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '-config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: mydatabase
    ports:
      - "5422:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migration:
    build:
      context: ./
      dockerfile: cmd/migration/Dockerfile.migration
    entrypoint: [ "/bin/sh", "-c", "sleep 5 && ./migrate -type=run" ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitoring
    restart: "no"

networks:
  monitoring:

volumes:
  prometheus_data:
  grafana_data:
  postgres_data: